sum(df_usd$Salary > 123690)
glimpse(sort(df_usd$Salary))
glimpse(sort(df_usd$Salary, decreasing = TRUE))
cut_offs <- quantile(df_usd$Salary, c(.1, .9))
cut_offs
df_usd <-
filter(df_usd, Salary > cut_offs[1] & Salary < cut_offs[2])
range(df_usd$Salary)
df_usd$Remote <- as.factor(df_usd$Remote.or.on.site.)
contrasts(df_usd$Remote)
df_usd$Remote.or.on.site. <- NULL # delete the column
df_usd <-
filter(df_usd, Remote != "")
# now update the factor levels
df_usd$Remote <- droplevels(df_usd$Remote)
plot(df_usd$Remote, df_usd$Salary)
tb_usd <- as_tibble(df_usd)
str(tb_usd)
tb <- as_tibble(df)
top_n(df, 20, df$How.old.are.you.)
tb$Age <- as.factor(tb$How.old.are.you.)
tb$How.old.are.you. <- NULL
tb$Salary <- tb$Annual.salary..gross.
tb$Annual.salary..gross. <- NULL
tb %>%
summarize(Older = sum(Age == "65 or over"), Tech = sum(Industry == "Computing or Tech") )
tb %>%
group_by(Age) %>%
summarize(median_Salary = median(Salary))
names(tb)
unique(tb$State)
unique(tb$Highest.level.of.education.completed)
unique(tb$Years.of.experience..overall)
unique(tb$Years.of.experience.in.field)
complete.cases(df)
?read.csv()
tb <- as_tibble(df)
top_n(tb, 20, df$How.old.are.you.)
tb <- as_tibble(df)
top_n(tb, 10, df$How.old.are.you.)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
tb <- as_tibble(mtcars)
if (!require(tidyverse)){
install.packages("tidyverse")
}
library("tidyverse")
tb <- as_tibble(mtcars)
glimpse(tb)
mtcars
names(mtcars)
names(tb)
str(mtcars)
head(mtcars)
heat(tb)
head(tb)
tb <-
as_tibble(mtcars) %>%
rownames_to_column()
tb
glimpse(tb)
?rownames_to_column()
tb <- rownames_to_column(mtcars, var = "car")
%>% as_tibble()
tb <- rownames_to_column(mtcars, var = "car") %>% as_tibble()
tb
tb$car
View(tb)
View(tb)
View(tb)
install.packages("editData")
library(editData)
editData(tb)
View(tb)
editData(tb)
editData(tb)
editData(mtcars)
editData(mtcars)
write_csv(mtcars, "mtcars.csv")
?write_csv()
write.csv(mtcars, "mtcars.csv")
write.csv(mtcars, "mtcars.csv")
tb <- read.csv(mtcars.csv) %>% as_tibble()
tb <- read.csv("mtcars.csv") %>% as_tibble()
glimpse(tb)
head(tb)
tb %>% separate(car, c("make", "model"), extra = "merge")
tb$make
make
head(tf)
head(tb)
tb <-
tb %>% separate(car, c("make", "model"), extra = "merge")
tb$make
tb$model
tb <-
tb %>% separate(car, c("make", "model"), extra = "merge")
tb <- read.csv("mtcars.csv") %>% as_tibble()
glimpse(tb)
tb <-
tb %>% separate(car, c("make", "model"), extra = "merge")
tb
?unite()
tb_cars <- tb %>%
unite("car", make:model)
tb_cars
tb_cars <- tb %>%
unite("car", make:model)
tb_cars
stocks <- tibble(
time = as.Date("2009-01-01") + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks <- tibble(
time = as.Date("2009-01-01") + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
data()
AirPassengers
LakeHuron
ToothGrowth
BJsales
?BJsales
stocks <- tibble(
time = as.Date("2009-01-01") + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
rnorm(10, 1, 4)
?rand()
?randu
?Random()
?runif()
runif(10)
sample(1:4,10, replace=T)
stocks <- tibble(
Team = sample(1:4,10, replace=T),
Year = as.Date("2020-01-01") + 0:9,
Q1 = sample(10:400, 10, replace=T),
Q2 = rnorm(10, 0, 2),
Q3 = rnorm(10, 0, 4)
)
stocks
stocks <- tibble(
Team = sample(1:4,10, replace=T),
Year = as.Date("2020-01-01") + 0:9,
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
stocks
performance <- tibble(
Team = sample(1:4,10, replace=T),
Year = as.Date("2020-01-01") + 0:9,
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance
performance <- tibble(
Team = sample(1:4,10, replace=T),
Year = "202" + 0:9,
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance <- tibble(
Team = sample(1:4,10, replace=T),
Year = sample(2020:2022, 10, replace=T),
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance
performance <- tibble(
Team = sample(1:4,10, replace=T),
Year = sample(2020:2022, 10, replace=F),
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance <- tibble(
Team = sample(1:4,10, replace=T),
Year = sample(2020:2022, 10, replace=T),
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance
"200" + as.character(1:9)
2000:2010
performance <- tibble(
Team = sample(1:4,10, replace=T),
Year = 2000:2009,
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance
performance <- tibble(
#Team = sample(1:4,10, replace=T),
Year = 2000:2009,
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance
tb_long <- tb %>% gather(Quarter, Revenue, Qtr.1:Qtr.4)
tb_long <- tb %>% gather(Quarter, Revenue, Q1:Q4)
names(tb)
tb_long <- performance %>% gather(Quarter, Revenue, Q1:Q4)
head(tb_long, 24)  # note, for brevity, I only show the data for the first two years
tb_long <- performance %>% gather(Quarter, Revenue, Q1:Q4)
glimpse(tb_long)
tb_long <- performance %>% gather(Quarter, Performance, Q1:Q4)
glimpse(tb_long)
plot(tb_long$Quarter, tb_long$Performance)
tb_long$Quarter <- as.factor(tb_long$Quarter)
plot(tb_long$Quarter, tb_long$Performance)
tb_wide <- tb_long %>% spread(Quarter, Performance)
glimpse(tb_wide)
plot(tb_wide$2000)
plot(tb_wide$Year)
plot(tb_wide$Q1)
plot(tb_wide$Q2)
plot(tb_wide$Q3)
plot(tb_wide$Q4)
plot(tb_wide$Q2)
plot(tb_wide$Q1)
?arrange()
performance
arrange(performance, Q1)
tb_cars$make
tb$make
?select()
tb_temp <- tb_cars %>% select(car, mpg, cyl)
plot(factor(tb_temp$cyl), tb_temp$mpg)
if (!require(tidyverse)){
install.packages("tidyverse")
}
library("tidyverse")
tb <- as_tibble(mtcars)
glimpse(tb)
head(mtcars)
tb <- rownames_to_column(mtcars, var = "car") %>% as_tibble()
tb$car # examine the car names
write.csv(mtcars, "mtcars.csv")
tb <- read.csv("mtcars.csv") %>% as_tibble()
glimpse(tb)
tb <-
tb %>% separate(tb$car, c("make", "model"), extra = "merge")
tb <-
tb %>% separate(car, c("make", "model"), extra = "merge")
names(tb)
tb <-
tb %>% separate(X, c("make", "model"), extra = "merge")
tb
tb_cars <- tb %>%
unite("car", make:model)
tb_cars
tb_temp <- tb_cars %>% select(car, mpg, cyl)
plot(factor(tb_temp$cyl), tb_temp$mpg)
performance <- tibble(
#Team = sample(1:4,10, replace=T),
Year = 2000:2009,
Q1 = sample(10:400, 10, replace=T),
Q2 = sample(10:400, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:400, 10, replace=T)
)
performance
tb_long <- performance %>% gather(Quarter, Performance, Q1:Q4)
glimpse(tb_long)
tb_wide <- tb_long %>% spread(Quarter, Performance)
glimpse(tb_wide)
plot(tb_wide$Q1)
performance
arrange(performance, Q1)
tb <- read.csv("mtcars.csv") %>% as_tibble()
glimpse(tb)
tb_cars <- tb %>%
unite("car", make:model)
names(tb)
tb <-
tb %>% separate(X, c("make", "model"), extra = "merge")
tb
tb_cars <- tb %>%
unite("car", make:model)
tb_cars
performance <- tibble(
#Team = sample(1:4,10, replace=T),
Year = 2000:2009,
Q1 = sample(10:200, 10, replace=T),
Q2 = sample(10:300, 10, replace=T),
Q3 = sample(10:400, 10, replace=T),
Q4 = sample(10:500, 10, replace=T)
)
performance
tb_wide <- tb_long %>% spread(Quarter, Performance)
glimpse(tb_wide)
plot(tb_wide$Q1)
plot(tb_wide$Year, tb_wide$Q1)
plot(tb_wide$Year, tb_wide$Q4)
data(algae)
algae
df <- data(algae)
df
library(DMwR)
install.packages("DMwR")
library(DMwR)
impute.knn()
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)){
install.packages("tidyverse")
}
library("tidyverse")
hire_date <- as.Date("2016-09-01")
days_employed <- Sys.Date() - hire_date
print(days_employed)
birth_date <- as.Date("1989-04-18")
difftime(Sys.Date(), birth_date, units="secs")
library(lubridate)
today()
now()
df <- airquality[]
df$date <- ymd(paste("1973",airquality$Month,airquality$Day))
print(range(df$date))
df$date[nrow(df)] - df$date[1]  # time difference
data(women)
plot(women$height, women$weight)
temp_df <- data.frame(height=c(40, 65), weight=c(120, 600))
df <- rbind(women, temp_df)
tail(df)
plot(df$height, df$weight)
par(mfrow=c(1,2))
boxplot(df$height, main="height")
boxplot(df$weight, main="weight")
print("Suspected outliers:")
i <- which.min(df$height)
print(df[i,])
i <- which.max(df$weight)
print(df[i, ])
head(df[order(df$height),], n=2)
head(df[order(df$weight, decreasing=TRUE),], n=2)
library(tm)
install.packages("devtools")
library(devtools)
slam_url <- "https://cran.r-project.org/src/contrib/Archive/slam/slam_0.1-37.tar.gz"
install_url(slam_url)
install.packages("tm")
library(tm)
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)){
install.packages("tidyverse")
}
library("tidyverse")
hire_date <- as.Date("2016-09-01")
days_employed <- Sys.Date() - hire_date
print(days_employed)
birth_date <- as.Date("1989-04-18")
difftime(Sys.Date(), birth_date, units="secs")
library(lubridate)
today()
now()
df <- airquality[]
df$date <- ymd(paste("1973",airquality$Month,airquality$Day))
print(range(df$date))
df$date[nrow(df)] - df$date[1]  # time difference
data(women)
plot(women$height, women$weight)
temp_df <- data.frame(height=c(40, 65), weight=c(120, 600))
df <- rbind(women, temp_df)
tail(df)
plot(df$height, df$weight)
par(mfrow=c(1,2))
boxplot(df$height, main="height")
boxplot(df$weight, main="weight")
print("Suspected outliers:")
i <- which.min(df$height)
print(df[i,])
i <- which.max(df$weight)
print(df[i, ])
head(df[order(df$height),], n=2)
head(df[order(df$weight, decreasing=TRUE),], n=2)
library(tm)
knitr::opts_chunk$set(echo = TRUE)
require(ffbase)
memory.limit()
memory.size()
knitr::opts_chunk$set(echo = TRUE)
if (!require(caret)){
install.packages("caret")
}
library("caret")
default_full <- read.csv("data/default.csv", header=TRUE)
default_full$default <- factor(default_full$default)
summary(default_full$default)
default_rate = nrow(default_full[default_full$default==1,]) / nrow(default_full)
print(paste("default rate = ", default_rate))
# limit columns
default_full <- default_full[,c(2:8,13,19,20,25)]
set.seed(1234)
i <- sample(1:nrow(default_full), 0.8*nrow(default_full), replace=FALSE)
train_full <- default_full[i,]
test <- default_full[-i,]
glm1 <- glm(default~., data=train_full, family=binomial)
probs <- predict(glm1, newdata=test, type='response')
pred <- ifelse(probs>0.5, 1, 0)
confusionMatrix(pred, test$default)
str(default)
glm1 <- glm(default~., data=train_full, family=binomial)
probs <- predict(glm1, newdata=test, type='response')
pred <- as_factor(ifelse(probs>0.5, 1, 0))
confusionMatrix(pred, test$default)
mean(pred==test$default)
set.seed(1234)
j <- sample(1:30000, 1000, replace=FALSE)
df_1000_random <- default_full[j,]
set.seed(1234)
i <- sample(1:1000, 800, replace=FALSE)
train <- df_1000_random[i,]
test <- df_1000_random[-i,]
glm2 <- glm(default~., data=train, family=binomial)
probs <- predict(glm2, newdata=test, type='response')
pred <- ifelse(probs>0.5, 1, 0)
confusionMatrix(pred, test$default)
set.seed(1234)
i <- sample(1:1000, 800, replace=FALSE)
train <- df_1000_random[i,]
test <- df_1000_random[-i,]
glm2 <- glm(default~., data=train, family=binomial)
probs <- predict(glm2, newdata=test, type='response')
pred <- as_factor(ifelse(probs>0.5, 1, 0))
confusionMatrix(pred, test$default)
mean(pred==test$default)
k <- createDataPartition(default_full$default, p=0.8, list=FALSE)
train_k <- default_full[k,]
test_k <- default_full[-k,]
default_rate_k = nrow(train_k[train_k$default==1,]) / nrow(train_k)
#same
glm3 <- glm(default~., data=train_k, family=binomial)
probs <- predict(glm3, newdata=test_k, type='response')
pred <- as_factor(ifelse(probs>0.5, 1, 0))
confusionMatrix(pred, test_k$default)
mean(pred==test_k$default)
train_0 <- train_k[which(train_k$default==0),]
train_1 <- train_k[which(train_k$default==1),]
set.seed(1234)
j <- sample(1:5300, 5000, replace=FALSE)
train_bal <- rbind(train_0[j,], train_1[1:5000,])
glm4 <- glm(default~., data=train_bal, family=binomial)
probs <- predict(glm4, newdata=test_k, type='response')
pred <- as_factor(ifelse(probs>0.5, 1, 0))
confusionMatrix(pred, test_k$default)
mean(pred==test_k$default)
glm1 <- glm(default~., data=train_full, family=binomial)
probs <- predict(glm1, newdata=test, type='response')
pred <- as_factor(ifelse(probs>0.5, 1, 0))
confusionMatrix(pred, test$default)
mean(pred==test$default)
?as_factor()
1 + 1
#| echo: false
1 + 1
data(airquality)
head(airquality, n=2)
if (!require(tidyverse)){
install.packages("tidyverse")
}
library("tidyverse")
data(airquality)
head(airquality, n=2)
sum(is.na(airquality$Ozone))
mean(airquality$Ozone)
mean(airquality$Ozone, na.rm=TRUE)
df <- airquality[]
df$Ozone[is.na(df$Ozone)] <- mean(df$Ozone, na.rm=TRUE)
mean(df$Ozone)
hist(airquality$Temp)
plot(airquality$Temp)
plot(airquality$Temp, airquality$Ozone)
plot(airquality$Ozone, airquality$Temp, pch=16, col="blue", cex=1.5,
main="Airquality", xlab="Ozone", ylab="Temperature")
cor(airquality[1:4], use="complete")
pairs(airquality[1:4])
df <- airquality[] # copy the data set df
df$Hot <- FALSE
df$Hot[df$Temp>89] <- TRUE
df$Hot <- factor(df$Hot)
df$Hot[40:46]
plot(df$Hot)
par(mfrow=c(1,3))
plot(df$Hot)
cdplot(df$Temp, df$Hot)
plot(df$Hot, df$Temp)
