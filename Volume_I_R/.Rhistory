table(pred, test$Species)
}
set.seed(1234)
i <- sample(1:150, 100, replace=FALSE)
fun(iris_virginica, i)
fun(iris_setosa, i)
fun(iris_versicolor, i)
if (!require(ROCR)){
install.packages("ROCR")
}
library("ROCR")
df <- read.csv("data/titanic.csv", header=TRUE)
str(df)
df <- df[,c(1,2,4,5)]
df$pclass <- factor(df$pclass)
df$survived <- factor(df$survived)
df$sex <- factor(df$sex)
head(df)
sapply(df, function(x) sum(is.na(x)==TRUE))
df$age[is.na(df$age)] <- median(df$age,na.rm=T)
set.seed(1234)
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(survived~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$survived)
print(paste("accuracy = ", acc))
table(pred, test$survived)
library(caret)
confusionMatrix(as.factor(pred), reference=test$survived)
# uses library(ROCR)
p <- predict(glm1, newdata=test, type="response")
pr <- prediction(p, test$survived)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
if (!require(ROCR)){
install.packages("ROCR")
}
library("ROCR")
if (!require(caret)){
install.packages("caret")
}
library("caret")
if (!require(HSAUR)){
install.packages("HSAUR")
}
library("HSAUR")
str(plasma)
head(plasma)
par(mfrow=c(1,2))
plot(ESR, plasma$fibrinogen, main="Fibrinogen", ylab="", varwidth=TRUE)
par(mfrow=c(1,2))
plot(plasma$ESR, plasma$fibrinogen, main="Fibrinogen", ylab="", varwidth=TRUE)
plot(plasma$ESR, plasma$globulin, main="Globulin", ylab="", varwidth=TRUE)
par(mfrow=c(1,2))
cdplot(plasma$ESR~plasma$fibrinogen)
cdplot(plasma$ESR~plasma$globulin)
set.seed(3)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(plasma$ESR~plasma$fibrinogen, data=train, family=binomial)
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc1 <- mean(pred==as.integer(test$ESR))
print(paste("glm1 accuracy = ", acc1))
table(pred, as.integer(test$ESR))
probs
probs <- predict(glm1, data=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc1 <- mean(pred==as.integer(test$ESR))
print(paste("glm1 accuracy = ", acc1))
table(pred, as.integer(test$ESR))
dim(test)
probs <- predict(glm1, newdata=test, type="response")
probs
?predict()
glm1 <- glm(plasma$ESR~plasma$fibrinogen, data=train, family=binomial)
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc1 <- mean(pred==as.integer(test$ESR))
print(paste("glm1 accuracy = ", acc1))
table(pred, as.integer(test$ESR))
if (!require(HSAUR)){
install.packages("HSAUR")
}
library("HSAUR")
str(plasma)
head(plasma)
set.seed(3)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(plasma$ESR~plasma$fibrinogen, data=train, family=binomial)
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc1 <- mean(pred==as.integer(test$ESR))
print(paste("glm1 accuracy = ", acc1))
table(pred, as.integer(test$ESR))
pred
probs <- predict(glm1, newdata=test, type="response")
dim(probs)
probs
probs <- predict(glm1, data=test, type="response")
probs
probs <- predict(glm1, test, type="response")
probs
if (!require(HSAUR)){
install.packages("HSAUR")
}
library("HSAUR")
data(plasma)
set.seed(1234)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(ESR~fibrinogen, data=train, family=binomial)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
summary(glm1)
if (!require(HSAUR)){
install.packages("HSAUR")
}
library("HSAUR")
str(plasma)
head(plasma)
par(mfrow=c(1,2))
plot(plasma$ESR, plasma$fibrinogen, main="Fibrinogen", ylab="", varwidth=TRUE)
plot(plasma$ESR, plasma$globulin, main="Globulin", ylab="", varwidth=TRUE)
par(mfrow=c(1,2))
cdplot(plasma$ESR~plasma$fibrinogen)
cdplot(plasma$ESR~plasma$globulin)
set.seed(3)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
set.seed(1234)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(ESR~fibrinogen, data=train, family=binomial)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
summary(glm1)
probs
glm1 <- glm(plasma$ESR~plasma$fibrinogen, data=train, family=binomial)
summary(glm1)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc1 <- mean(pred==as.integer(test$ESR))
print(paste("glm1 accuracy = ", acc1))
table(pred, as.integer(test$ESR))
set.seed(1234)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(ESR~fibrinogen, data=train, family=binomial)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
summary(glm1)
set.seed(1234)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(ESR~fibrinogen, data=train, family=binomial)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
table(pred, as.integer(test$ESR))
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
table(pred, as.integer(test$ESR))
set.seed(3)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
set.seed(1234)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(ESR~fibrinogen, data=train, family=binomial)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
table(pred, as.integer(test$ESR))
glm1 <- glm(plasma$ESR~plasma$fibrinogen, data=train, family=binomial)
summary(glm1)
if (!require(HSAUR)){
install.packages("HSAUR")
}
library("HSAUR")
str(plasma)
head(plasma)
par(mfrow=c(1,2))
plot(plasma$ESR, plasma$fibrinogen, main="Fibrinogen", ylab="", varwidth=TRUE)
plot(plasma$ESR, plasma$globulin, main="Globulin", ylab="", varwidth=TRUE)
par(mfrow=c(1,2))
cdplot(plasma$ESR~plasma$fibrinogen)
cdplot(plasma$ESR~plasma$globulin)
set.seed(3)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(ESR~fibrinogen, data=train, family=binomial)
summary(glm1)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
table(pred, as.integer(test$ESR))
fibro <- glm1$coefficients[2]
intercept <- glm1$coefficients[1]
log_odds <- function(x, fibro, intercept){
intercept + fibro * x
}
x <- seq(from=2.25, to=5.0, by=0.25)
y <- log_odds(x, fibro, intercept)
par(mfrow=c(1,2))
plot(x,y, main="log odds", ylab="")
prob <- exp(y) / (1 + exp(y))
plot(x, prob, main="probabilities", ylab="")
glm2 <- glm(ESR~fibrinogen+globulin, data=train, family=binomial)
summary(glm2)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc2 <- mean(pred==as.integer(test$ESR))
print(paste("glm2 accuracy = ", acc2))
table(pred, as.integer(test$ESR))
anova(glm1, glm2)
set.seed(1234)
i <- sample(1:nrow(plasma), 0.75*nrow(plasma), replace=FALSE)
train <- plasma[i,]
test <- plasma[-i,]
glm1 <- glm(ESR~fibrinogen, data=train, family=binomial)
summary(glm1)
probs <- predict(glm1,  newdata=test, type="response")
pred <- ifelse(probs> 0.5, 2, 1)
acc <- mean(pred == as.integer(test$ESR))
table(pred, as.integer(test$ESR))
fibro <- glm1$coefficients[2]
intercept <- glm1$coefficients[1]
log_odds <- function(x, fibro, intercept){
intercept + fibro * x
}
x <- seq(from=2.25, to=5.0, by=0.25)
y <- log_odds(x, fibro, intercept)
par(mfrow=c(1,2))
plot(x,y, main="log odds", ylab="")
prob <- exp(y) / (1 + exp(y))
plot(x, prob, main="probabilities", ylab="")
glm2 <- glm(ESR~fibrinogen+globulin, data=train, family=binomial)
summary(glm2)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc2 <- mean(pred==as.integer(test$ESR))
print(paste("glm2 accuracy = ", acc2))
table(pred, as.integer(test$ESR))
anova(glm1, glm2)
if (!require(caret)){
install.packages("caret")
}
library("caret")
if (!require(mlbench)){
install.packages("mlbench")
}
library("mlbench")
if (!require(caret)){
install.packages("FSelector")
}
library("FSelector")
if (!require(caret)){
install.packages("caret")
}
library("caret")
if (!require(mlbench)){
install.packages("mlbench")
}
library("mlbench")
if (!require(Fselector)){
install.packages("FSelector")
}
library("FSelector")
install.packages("randomForest")
if (!require(caret)){
install.packages("caret")
}
library("caret")
if (!require(mlbench)){
install.packages("mlbench")
}
library("mlbench")
if (!require(Fselector)){
install.packages("FSelector")
}
library("FSelector")
library(randomForest)
install.packages("randomForest")
rfNews()
install.packages("randomForest")
install.packages("FSelector")
libary(FSelector)
library(FSelector)
install.packages(rJava)
install.packages("rJava")
library(FSelector)
if (!require(caret)){
install.packages("caret")
}
library("caret")
if (!require(mlbench)){
install.packages("mlbench")
}
library("mlbench")
if (!require(Fselector)){
install.packages("FSelector")
}
library("FSelector")
if (!require(caret)){
install.packages("caret")
}
library("caret")
if (!require(mlbench)){
install.packages("mlbench")
}
library("mlbench")
#if (!require(Fselector)){
#  install.packages("FSelector")
#}
#library("FSelector")
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
df <- df[,-c(2,6)]
ctrl <- trainControl(method="repeatedcv", repeats=5)
model <- train(diabetes~., data=df, method="knn", preProcess="scale", trControl=ctrl)
importance <- varImp(model, scale=FALSE)
importance
plot(importance)
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
ctrl <- rfeControl(functions=rfFuncs, method="cv", number=10)
rfe_out <- rfe(df[,1:7], df[,8], sizes=c(1:7), rfeControl=ctrl)
rfe_out
df <- read.csv("data/titanic.csv", header=TRUE)
# data cleaning
df <- df[,c(1,2,4,5)]
df$pclass <- factor(df$pclass)
df$survived <- factor(df$survived)
# handle missing values
df$age[is.na(df$age)] <- median(df$age,na.rm=T)
set.seed(1234)
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
if (!require(e1071)){
install.packages("e1071")
}
library("e1071")
df <- read.csv("data/titanic.csv", header=TRUE)
# data cleaning
df <- df[,c(1,2,4,5)]
df$pclass <- factor(df$pclass)
df$survived <- factor(df$survived)
# handle missing values
df$age[is.na(df$age)] <- median(df$age,na.rm=T)
set.seed(1234)
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
library(e1071)
nb1 <- naiveBayes(survived~., data=train)
nb1
p1 <- predict(nb1, newdata=test, type="class")
table(p1, test$survived)
mean(p1==test$survived)
p1_raw <- predict(nb1, newdata=test, type="raw")
head(p1_raw)
nb2 <- naiveBayes(survived~.-age, data=train)
p2 <- predict(nb2, newdata=test[,-4], type="class")
table(p2, test$survived)
mean(p2==test$survived)
if (!require(e1071)){
install.packages("e1071")
}
library("e1071")
df <- read.csv("data/titanic3.csv", header=TRUE, stringsAsFactors = FALSE)
# subset to just columns survived, pclass, sex, and age
df <- df[,c(1,2,4,5)]
# pclass and survived  and sex should be factors
df$pclass <- factor(df$pclass)
df$survived <- factor(df$survived)
df$sex <- factor(df$sex, levels=c("female", "male"))
# remove NAs
df <- df[!is.na(df$pclass),]
df <- df[!is.na(df$survived),]
df$age[is.na(df$age)] <- median(df$age,na.rm=T)
# divide into train and test
set.seed(1234)
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
# perform Naive Bayes
library(e1071)
nb1 <- naiveBayes(df[,-2], df[,2], data=train)
pred <- predict(nb1, newdata=test[,-2], type="raw")
# look at first 5 (actual: 0 1 1 1 0)
pred[1:5,]
apriori <- c(
nrow(df[df$survived=="0",])/nrow(df),
nrow(df[df$survived=="1",])/nrow(df)
)
print("Prior probability, survived=no, survived=yes:")
apriori
if (!require(e1071)){
install.packages("e1071")
}
library("e1071")
df <- read.csv("data/titanic3.csv", header=TRUE, stringsAsFactors = FALSE)
# subset to just columns survived, pclass, sex, and age
df <- df[,c(1,2,4,5)]
# pclass and survived  and sex should be factors
df$pclass <- factor(df$pclass)
df$survived <- factor(df$survived)
df$sex <- factor(df$sex, levels=c("female", "male"))
# remove NAs
df <- df[!is.na(df$pclass),]
df <- df[!is.na(df$survived),]
df$age[is.na(df$age)] <- median(df$age,na.rm=T)
# divide into train and test
set.seed(1234)
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
# perform Naive Bayes
library(e1071)
nb1 <- naiveBayes(df[,-2], df[,2], data=train)
pred <- predict(nb1, newdata=test[,-2], type="raw")
# look at first 5 (actual: 0 1 1 1 0)
pred[1:5,]
apriori <- c(
nrow(df[df$survived=="0",])/nrow(df),
nrow(df[df$survived=="1",])/nrow(df)
)
print("Prior probability, survived=no, survived=yes:")
apriori
# get survived counts for no and yes
count_survived <- c(
length(df$survived[df$survived=="0"]),
length(df$survived[df$survived=="1"])
)
# likelihood for pclass
lh_pclass <- matrix(rep(0,6), ncol=3)
for (sv in c("0", "1")){
for (pc in c("1","2","3")) {
lh_pclass[as.integer(sv)+1, as.integer(pc)] <-
nrow(df[df$pclass==pc & df$survived==sv,]) / count_survived[as.integer(sv)+1]
}
}
# likelihood for sex
lh_sex <- matrix(rep(0,4), ncol=2)
for (sv in c("0", "1")){
for (sx in c(1, 2)) {
lh_sex[as.integer(sv)+1, sx] <-
nrow(df[as.integer(df$sex)==sx & df$survived==sv,]) /
count_survived[as.integer(sv)+1]
}
}
print("Likelihood values for p(pclass|survived):")
lh_pclass
print("Likelihood values for p(sex|survived):")
lh_sex
age_mean <- c(0, 0)
age_var <- c(0, 0)
for (sv in c("0", "1")){
age_mean[as.integer(sv)+1] <-
mean(df$age[df$survived==sv])
age_var[as.integer(sv)+1] <-
var(df$age[df$survived==sv])
}
calc_age_lh <- function(v, mean_v, var_v){
# run like this: calc_age_lh(6, 25.9, 138)
1 / sqrt(2 * pi * var_v) * exp(-((v-mean_v)^2)/(2 * var_v))
}
calc_raw_prob <- function(pclass, sex, age) {
# pclass=1,2,3  sex=1,2   age=numeric
num_s <- lh_pclass[2, pclass] * lh_sex[2, sex] * apriori[2] *
calc_age_lh(age, age_mean[2], age_var[2])
num_p <- lh_pclass[1, pclass] * lh_sex[1, sex] * apriori[1] *
calc_age_lh(age, age_mean[1], age_var[1])
denominator <- lh_pclass[2, pclass]  * lh_sex[2, sex] * calc_age_lh(age, age_mean[2], age_var[2]) * apriori[2] +
lh_pclass[1, pclass]  * lh_sex[1, sex] * calc_age_lh(age, age_mean[1], age_var[1]) * apriori[1]
return (list(prob_survived <- num_s / denominator, prob_perished <- num_p / denominator))
}
for (i in 1:5){
raw <- calc_raw_prob(test[i,1], as.integer(test[i,3]), test[i,4])
print(paste(raw[2], raw[1]))
}
pred[1:5,]
